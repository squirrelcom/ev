<<<<<<< HEAD
29/12/2015
----------

### Notes on Assembly

Registers

---------------------------------------------------------------
16bit | 32bit | 64bit |               Description             |
---------------------------------------------------------------
 ax   |  eax  |  rax  | accumulator register
 bx   |  ebx  |  rbx  | base register
 cx   |  ecx  |  rcx  | counter
 dx   |  edx  |  rdx  | data register
 sp   |  esp  |  rsp  | stack pointer
 bp   |  ebp  |  rbp  | base pointer
      |   rn  |  rnd  | n = 8..15, general purpose registers
 si   |  esi  |  rsi  | source index for string operations
 di   |  edi  |  rdi  | destination index for string operations
 ip   |  eip  |  rip  | instruction pointer

Instruction Suffixes

- b / byte / 8 bits
- s / short / 16 bits
- w / word / 16 bits
- l / long / 32 bits
- q / quad / 64 bits

Simple explanation of Hello World:

msg: .ascii "Hello World\n"    # set the msg variable

_start:
    movl $4, %eax    # use the write syscall. In Linux it is defined
                     # under arch/x86/include/asm/unistd_64.h as:
                     #     #define __NR_write 1
    movl $1, %ebx    # write to stdout (0 = stdin, 1 = stdout)
    movl $msg, %ecx  # use the "Hello World" string
    movl $12, %edx   # going to write 12 characters
    int $0x80

    movl $1, %eax   # use the exit syscall. In Linux it is defined
                    # under arch/x86/include/asm/unistd_64.h as:
                    #     #define __NR_exit 60
    movl $0, %ebx   # use error code 0
    int $0x80

### Useful links

[https://docs.oracle.com/cd/E19253-01/817-5477/817-5477.pdf]


=======
21/12/2015
----------

## Notes on Assembly Language.

- Some differences between Linux/*BSD/illumos ASM programming.
- illumos ASM is poorly documented.
- FreeBSD provides good documentation so far.
- Some items to note:
  - Intel syntax
    mov dst, src
    int 80H
  - AT&T syntax
    mov src, dst
    int 0x80
  - Linux/*BSD/illumos use AT&T syntax.
  - Syscalls widely differ i.e. int 0x80 on Linux is int $91 on illumos.
  - pushl is widely used on illumos to set base-pointer.
- Took a slight detour and built a cross-compiler on Debian using instructions
  from [http://wiki.osdev.org/GCC_Cross-Compiler]
- Located under /opt/cross.
- Working on [http://wiki.osdev.org/Bare_bones]
  - Hello, World kernel booted.
  - boot.s to set registers, memory and stack.
  - kernel.c to print string.
  - linker.ld to link object files created.
  - Runs in qemu using `qemu-system-i386 -curses -cdrom myos.iso`.
  - Need to pick through the source and document what the source does exactly.

## Useful links
- [https://www.freebsd.org/doc/en/books/developers-handbook/x86.html]
- [http://www.int80h.org/]
>>>>>>> 960434034d7f11f29099ffcbe26e0b3121949cc6
